
'use server';

import { addMonths, format } from 'date-fns';
import type { Member, MembershipType, Announcement, FetchedMembershipPlan } from '@/lib/types';
import { APP_NAME } from '@/lib/constants';
import { addMemberFormSchema, type AddMemberFormValues } from '@/lib/schemas/member-schemas';
import { createSupabaseServerActionClient } from '@/lib/supabase/server';


interface AddMemberServerResponse {
  data?: {
    newMember: Member;
    welcomeAnnouncement: Announcement;
    emailStatus: string;
  };
  error?: string;
}

export async function addMember(
  formData: AddMemberFormValues,
  gymDatabaseId: string,
  gymName: string
): Promise<AddMemberServerResponse> {
  const supabase = createSupabaseServerActionClient();
  try {
    // 1. Server-side validation
    const validationResult = addMemberFormSchema.safeParse(formData);
    if (!validationResult.success) {
      console.error("Server-side validation failed:", validationResult.error.flatten().fieldErrors);
      const fieldErrors = validationResult.error.flatten().fieldErrors;
      let errorMessages = [];
      if (fieldErrors.name) errorMessages.push(`Name: ${fieldErrors.name.join(', ')}`);
      if (fieldErrors.email) errorMessages.push(`Email: ${fieldErrors.email.join(', ')}`);
      if (fieldErrors.selectedPlanUuid) errorMessages.push(`Membership Plan: ${fieldErrors.selectedPlanUuid.join(', ')}`);
      if (fieldErrors.age) errorMessages.push(`Age: ${fieldErrors.age.join(', ')}`);
      
      return { error: `Validation failed: ${errorMessages.join('; ') || 'Check inputs.'}` };
    }

    const { name, email, phoneNumber, age, selectedPlanUuid } = validationResult.data;

    // 2. Fetch selected plan details from DB
    const { data: planDetails, error: planError } = await supabase
      .from('plans')
      .select('id, plan_name, price, duration_months')
      .eq('id', selectedPlanUuid)
      .eq('is_active', true)
      .single();

    if (planError || !planDetails) {
      console.error('Error fetching plan details or plan not active:', planError?.message);
      return { error: `Invalid or inactive membership plan selected. Details: ${planError?.message || 'Plan not found.'}` };
    }
    
    if (planDetails.duration_months === null || planDetails.duration_months === undefined) {
        return { error: `Selected plan '${planDetails.plan_name}' has an invalid duration.`};
    }

    const planPrice = planDetails.price;
    const joinDate = new Date(); 
    const expiryDate = addMonths(joinDate, planDetails.duration_months);

    // 3. Generate Member ID (Server-side)
    const memberIdSuffix = Date.now().toString().slice(-6) + Math.random().toString(36).substring(2, 4).toUpperCase();
    const memberId = `${gymName.substring(0, 3).toUpperCase()}${memberIdSuffix}`.substring(0, 10);

    console.log(`SIMULATING: Check if Member ID "${memberId}" for gym "${gymDatabaseId}" is unique.`);
    // In a real app, you would query your members table here.

    // 4. Prepare New Member Object for DB (using snake_case for Supabase)
    const newMemberForDb = {
      gym_id: gymDatabaseId,
      plan_id: selectedPlanUuid, // FK to plans.id (uuid)
      member_id: memberId, 
      name,
      email: email || null,
      membership_status: 'active', 
      phone_number: phoneNumber || null,
      age: age || null,
      join_date: joinDate.toISOString(), 
      expiry_date: expiryDate.toISOString(),
      membership_type: planDetails.plan_name as MembershipType, // Store plan name for easy display
      // plan_price is not a direct column in members table as per schema, derived via plan_id
      created_at: new Date().toISOString(),
    };
    
    // SIMULATE DB INSERTION - In real app, use Supabase client to insert `newMemberForDb`
    // const { data: insertedMemberData, error: insertError } = await supabase
    //   .from('members')
    //   .insert(newMemberForDb)
    //   .select()
    //   .single();
    // if (insertError) { return { error: `Failed to add member to database: ${insertError.message}`}; }
    // const memberIdFromDb = insertedMemberData.id; // the UUID generated by DB for the member row

    // For simulation, create the full member object as it would be after insertion
    const newMember: Member = {
        id: `member_serveraction_${Date.now()}`, // Simulated DB-generated UUID for the member row
        gymId: gymDatabaseId,
        planId: selectedPlanUuid,
        memberId,
        name,
        email: email || null,
        membershipStatus: 'active',
        phoneNumber: phoneNumber || null,
        age: age || null,
        joinDate: joinDate.toISOString(),
        membershipType: planDetails.plan_name as MembershipType,
        planPrice: planPrice, // Store for client-side use
        expiryDate: expiryDate.toISOString(),
        createdAt: new Date().toISOString(),
    };
    console.log('SIMULATING: Member data prepared for "insertion":', newMember);


    // 5. Post-Insertion Actions
    let emailStatus = 'No email address provided.';
    if (newMember.email) {
      const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(newMember.memberId)}`;
      console.log(`SIMULATING: Sending Welcome Email to: ${newMember.email}`);
      console.log(`  Subject: Welcome to ${gymName}!`);
      console.log(`  Body: Hello ${newMember.name},\n\nWelcome to ${gymName}! We're thrilled to have you.\n
        Your Membership Details:
        Member ID: ${newMember.memberId}
        Join Date: ${format(new Date(newMember.joinDate!), 'PP')}
        Membership Type: ${newMember.membershipType}
        Plan Price: â‚¹${newMember.planPrice?.toFixed(2)}
        Expires: ${newMember.expiryDate ? format(new Date(newMember.expiryDate), 'PP') : 'N/A'}
        \nUse this QR code for easy check-ins: ${qrCodeUrl}\n\n
        Best regards,\nThe ${gymName} Team`);
      emailStatus = `Welcome email simulation for ${newMember.email} initiated.`;
    }

    const welcomeAnnouncement: Announcement = {
      id: `announce_welcome_${newMember.id}`,
      gymId: gymDatabaseId,
      title: `Welcome New Member: ${newMember.name}!`,
      content: `Let's all give a warm welcome to ${newMember.name} (ID: ${newMember.memberId}), who joined us on ${format(new Date(newMember.joinDate!), 'PP')} with a ${newMember.membershipType || 'new'} membership! We're excited to have them in the ${gymName} community.`,
      createdAt: new Date().toISOString(),
    };
    console.log('SIMULATING: Welcome announcement created:', welcomeAnnouncement);

    return {
      data: {
        newMember,
        welcomeAnnouncement,
        emailStatus,
      },
    };

  } catch (error) {
    console.error('Error in addMember server action:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred.';
    return { error: `An unexpected error occurred while adding the member: ${errorMessage}` };
  }
}

interface EditMemberServerResponse {
  data?: {
    updatedMember: Member;
    message: string;
  };
  error?: string;
}

// formData here should align with AddMemberFormValues, plus original member id
export async function editMember(
  formData: AddMemberFormValues, // Re-using the same form values
  memberOriginalId: string, // The true UUID of the member
  gymDatabaseId: string
): Promise<EditMemberServerResponse> {
    const supabase = createSupabaseServerActionClient();
    try {
        console.log("SIMULATING: Edit member server action for memberId (UUID):", memberOriginalId, "in gymId:", gymDatabaseId, "with data:", formData);

        // Server-side validation of formData (excluding member's existing ID or memberId)
        const validationResult = addMemberFormSchema.safeParse(formData);
        if (!validationResult.success) {
            return { error: `Validation failed: ${JSON.stringify(validationResult.error.flatten().fieldErrors)}` };
        }
        const { name, email, phoneNumber, age, selectedPlanUuid } = validationResult.data;

        // Fetch existing member to get non-editable fields like original member_id (user-facing) and join_date
        // In a real app: const { data: existingMemberFromDb, error: fetchError } = await supabase.from('members').select('member_id, join_date, plan_id').eq('id', memberOriginalId).single();
        // if (fetchError || !existingMemberFromDb) return { error: "Member not found or cannot be fetched for update."};
        const simulatedExistingMember = { member_id: `EDIT${Date.now().toString().slice(-4)}`, join_date: new Date(Date.now() - 100000000).toISOString(), current_plan_uuid: 'some_old_plan_uuid' };


        // Fetch details of the NEWLY selected plan
        const { data: planDetails, error: planError } = await supabase
          .from('plans')
          .select('id, plan_name, price, duration_months')
          .eq('id', selectedPlanUuid)
          .eq('is_active', true)
          .single();

        if (planError || !planDetails) {
            return { error: `Invalid or inactive new membership plan selected. Details: ${planError?.message || 'Plan not found.'}` };
        }
        if (planDetails.duration_months === null || planDetails.duration_months === undefined) {
            return { error: `Selected new plan '${planDetails.plan_name}' has an invalid duration.`};
        }

        const planPrice = planDetails.price;
        const joinDateForCalc = new Date(simulatedExistingMember.join_date); // Use original join date for expiry calc
        const expiryDate = addMonths(joinDateForCalc, planDetails.duration_months);


        // Prepare data for DB update (snake_case)
        const memberUpdateForDb = {
            name,
            email: email || null,
            phone_number: phoneNumber || null,
            age: age || null,
            plan_id: selectedPlanUuid, // FK to plans.id (uuid)
            membership_type: planDetails.plan_name as MembershipType,
            // plan_price is not a direct column
            expiry_date: expiryDate.toISOString(),
            // membership_status might be part of formData if editable in this flow
            // For now, assume status is handled separately or defaults.
            // If AddMemberFormValues includes membershipStatus:
            // membership_status: formData.membershipStatus || 'active', 
        };

        // SIMULATE DB UPDATE
        // const { data: updatedMemberData, error: updateError } = await supabase.from('members').update(memberUpdateForDb).eq('id', memberOriginalId).select().single();
        // if (updateError) return { error: `Failed to update member: ${updateError.message}`};

        // Construct the full Member object for client response
        const finalUpdatedMember: Member = {
            id: memberOriginalId,
            gymId: gymDatabaseId,
            memberId: simulatedExistingMember.member_id, // Keep original user-facing memberId
            name,
            email: email || null,
            phoneNumber: phoneNumber || null,
            age: age || null,
            joinDate: simulatedExistingMember.join_date, // Keep original join date
            planId: selectedPlanUuid,
            membershipType: planDetails.plan_name as MembershipType,
            planPrice: planPrice,
            expiryDate: expiryDate.toISOString(),
            membershipStatus: formData.membershipStatus || 'active', // If AddMemberFormValues had status
            createdAt: new Date(Date.now() - 200000000).toISOString(), // Placeholder original createdAt
        };
        
        console.log("SIMULATING: Member data updated:", finalUpdatedMember);
        return { data: { updatedMember: finalUpdatedMember, message: "Member details updated (Simulated)." } };

    } catch (error) {
        console.error('Error in editMember server action:', error);
        const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred.';
        return { error: `An unexpected error occurred while editing the member: ${errorMessage}` };
    }
}
    
